<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2024/04/24/RabbitMQ/"/>
      <url>/2024/04/24/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于 AMQP 协议，erlang语言开发，是部署最广泛的开源消息中间件,是最受欢迎的开源消息中间件之一。</p></blockquote><blockquote><p>特点：生态好，好学习、易理解，时效性强，支持很多不同语言的客户端，扩展性、可用性很好。</p></blockquote><blockquote><p>官方文档：<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com</a></p></blockquote><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>AMQP 协议（<a href="https://www.rabbitmq.com/tutorials/amqp-concepts%EF%BC%89%EF%BC%9A">https://www.rabbitmq.com/tutorials/amqp-concepts）：</a> 高级消息队列协议</p><p>生产者：发消息到交换机</p><p>消费者：从某个队列中取消息</p><p>交换机（Exchanage）：把消息 转发 到对应的队列</p><p>队列（Queue）：存储消息</p><p>路由（Routes）：转发</p><img alt="img" src="https://cdn.nlark.com/yuque/0/2024/png/40918944/1712059862683-1e5b663c-a367-4afe-923b-0a5d48e1d3d4.png"/><p>安装 rabbitMQ 监控面板</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins.bat enable rabbitmq_management</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:15672/#/">http://localhost:15672</a></p><p>账号密码默认为：guest</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40918944/1712063663216-67aeb43c-9db7-4d57-a940-ea5db41909b0.png" alt="img"></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.20.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多消费者"><a href="#多消费者" class="headerlink" title="多消费者"></a>多消费者</h2><p>场景：多个机器同时去接受并处理任务。一个生产者给一个队列发消息，多个消费者从这个队列取消息</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40918944/1712119879576-72b1de54-9031-40c1-9f0e-4653c77af5f1.png" alt="img"></p><p><strong>队列持久化：</strong></p><p>第二个参数（durable）设置为true，服务器重启后队列不会丢失：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p><strong>消息持久化：</strong></p><p>指定 MessageProperties.PERSISTENT_TEXT_PLAIN  参数，服务器重启后消息不会丢失：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>, TASK_QUEUE_NAME,</span><br><span class="line">        MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">        message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TASK_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;multi_queue&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">            channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            channel.basicQos(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 定义如何处理消息</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i+<span class="number">1</span>;</span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 处理工作</span></span><br><span class="line">                    System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + <span class="string">&quot;编号：&quot;</span> + finalI + <span class="string">&quot;:&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">                    <span class="comment">// 停20秒</span></span><br><span class="line">                    Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>,<span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot; [x] Done&quot;</span>);</span><br><span class="line">                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 开启消费者监听</span></span><br><span class="line">            channel.basicConsume(TASK_QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiProducer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TASK_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;multi_queue&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">         <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">        channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, TASK_QUEUE_NAME,</span><br><span class="line">                    MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">                    message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制单个消费者的处理任务积压数：</strong></p><p>这个参数告诉RabbitMQ不要同时给一个消费者超过一个（在这个例子中是1）未确认的消息。</p><p>这意味着消费者在处理并确认一个消息之前，队列不会发送新的消息给这个消费者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicQos(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>消息确认机制：</strong></p><p>当消费者接收到消息后，要给一个反馈：</p><ul><li>ack：消费成功</li><li>nack：消费失败</li><li>reject：拒绝</li></ul><p>自动确认（Auto Acknowledgment）：当消费者从队列中获取到消息后，RabbitMQ会立即认为消费者已经成功处理了消息，并从队列中移除。这种方式可能会因为消费者在处理消息时发生异常而导致消息丢失。</p><p>建议将autoack（第二个参数）改为 false，去手动确认</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启消费者监听</span></span><br><span class="line">channel.basicConsume(TASK_QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>指定确认某条消息：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>第二个参数 multiple 批量确认： 是指是否要一次性确认所有的历史消息直到当前这条</p><p><strong>指定拒绝某条消息：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>第三个参数表示是否重新入队，可用于重试</p><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>一个生产者给 多个 队列发消息</p><p>作用：提供转发功能，把消息转发到不同的队列上</p><p>绑定：交换机和队列关联起来，也可以叫路由，算是一个算法或转发策略</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40918944/1712120452367-93c645cd-b6bc-4219-b852-7f0bc2de3346.png" alt="img"></p><p>交换机类别：fanout、direct、topic、headers</p><h3 id="fanout-交换机："><a href="#fanout-交换机：" class="headerlink" title="fanout 交换机："></a>fanout 交换机：</h3><p>扇出、广播</p><p>特点：消息会转发到所有绑定该交换机的队列上</p><p>场景：很适用于发布订阅的场景</p><h4 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutProducer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;fanout-exchange&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">         <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">        <span class="comment">// 创建交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConsumer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;fanout-exchange&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 建立连接</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel1</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel2</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">    <span class="comment">// 声明交换机</span></span><br><span class="line">    channel1.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建队列</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;小雨的工作队列&quot;</span>;</span><br><span class="line">    channel1.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    channel1.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;小明的工作队列&quot;</span>;</span><br><span class="line">    channel2.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    channel2.queueBind(queueName2, EXCHANGE_NAME, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">DeliverCallback</span> <span class="variable">deliverCallback1</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; [小雨] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">DeliverCallback</span> <span class="variable">deliverCallback2</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot; [小明] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    channel1.basicConsume(queueName, <span class="literal">true</span>, deliverCallback1, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">    channel2.basicConsume(queueName2, <span class="literal">true</span>, deliverCallback2, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Direct-交换机："><a href="#Direct-交换机：" class="headerlink" title="Direct 交换机："></a>Direct 交换机：</h3><p>绑定：可以让交换机和队列进行关联，可指定交换机将指定的消息发送给指定的队列（可以理解为网线）</p><p>routingKey：路由键，控制消息要转发给哪个队列（可以理解为 IP 地址）</p><p>特点：消息会根据路由键转发到指定的队列</p><p>场景：特定的消息只交给特定的系统（程序）来处理</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40918944/1712127582891-08cf7447-09d1-47ea-8cfa-55b28dfa4ae5.png" alt="img"></p><h4 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectProducer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct-exchange&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">         <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            String[] strings = userInput.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(strings.length&lt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> strings[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> strings[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, routingKey, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot; with routing: &quot;</span> + routingKey + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct-exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建队列-1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName1</span> <span class="operator">=</span> <span class="string">&quot;direct1-test&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName1, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.queueBind(queueName1, EXCHANGE_NAME, <span class="string">&quot;direct1&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建队列-2</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;direct2-test&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.queueBind(queueName2, EXCHANGE_NAME, <span class="string">&quot;direct2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">direct1DeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [direct1] Received &#x27;&quot;</span> +</span><br><span class="line">                    delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">direct2DeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [direct2] Received &#x27;&quot;</span> +</span><br><span class="line">                    delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queueName1, <span class="literal">true</span>, direct1DeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        channel.basicConsume(queueName2, <span class="literal">true</span>, direct2DeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Topics-交换机"><a href="#Topics-交换机" class="headerlink" title="Topics 交换机"></a>Topics 交换机</h3><p>特点：消息会根据一个 <strong>模糊的路由键</strong> 转发到指定的队列</p><p>场景：特定的消息交给特定的一类系统（程序）来处理</p><p>绑定关系：可以模糊匹配多个绑定</p><ul><li><em>：匹配一个单词，例如：</em>.banana ，那么 a.banana、b.banana 都能匹配</li><li>#：匹配 0 个或多个单词，例如：a.#，那么 a.a、a.b、a.a.a 都能匹配</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40918944/1712476809798-6245451a-496e-4b2b-9a47-78d16a595b61.png" alt="img"></p><h4 id="生产者-3"><a href="#生产者-3" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicProducer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic_exchange&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">         <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;topic&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            String[] strings = userInput.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(strings.length&lt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> strings[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> strings[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, routingKey, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot; with routing: &quot;</span> + routingKey + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者-3"><a href="#消费者-3" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;topic&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建队列-1</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">queueName1</span> <span class="operator">=</span> <span class="string">&quot;frontend-test&quot;</span>;</span><br><span class="line">      channel.queueDeclare(queueName1, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">      channel.queueBind(queueName1, EXCHANGE_NAME, <span class="string">&quot;#.前端.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建队列-2</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">queueName2</span> <span class="operator">=</span> <span class="string">&quot;backend-test&quot;</span>;</span><br><span class="line">      channel.queueDeclare(queueName2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">      channel.queueBind(queueName2, EXCHANGE_NAME, <span class="string">&quot;#.后端.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建队列-3</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">queueName3</span> <span class="operator">=</span> <span class="string">&quot;product-test&quot;</span>;</span><br><span class="line">      channel.queueDeclare(queueName3, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">      channel.queueBind(queueName3, EXCHANGE_NAME, <span class="string">&quot;#.产品.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理从队列接收的消息</span></span><br><span class="line">      <span class="type">DeliverCallback</span> <span class="variable">direct1DeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">          System.out.println(<span class="string">&quot; [direct1] Received &#x27;&quot;</span> +</span><br><span class="line">                  delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="type">DeliverCallback</span> <span class="variable">direct2DeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">          System.out.println(<span class="string">&quot; [direct2] Received &#x27;&quot;</span> +</span><br><span class="line">                  delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="type">DeliverCallback</span> <span class="variable">direct3DeliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">          System.out.println(<span class="string">&quot; [direct3] Received &#x27;&quot;</span> +</span><br><span class="line">                  delivery.getEnvelope().getRoutingKey() + <span class="string">&quot;&#x27;:&#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 消费队列的消息</span></span><br><span class="line">      channel.basicConsume(queueName1, <span class="literal">true</span>, direct1DeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">      &#125;);</span><br><span class="line">      channel.basicConsume(queueName2, <span class="literal">true</span>, direct2DeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">      &#125;);</span><br><span class="line">      channel.basicConsume(queueName3, <span class="literal">true</span>, direct3DeliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h2><h3 id="消息过期机制"><a href="#消息过期机制" class="headerlink" title="消息过期机制"></a>消息过期机制</h3><h3 id="消息确认机制"><a href="#消息确认机制" class="headerlink" title="消息确认机制"></a>消息确认机制</h3><h3 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h3><h2 id="面试考点"><a href="#面试考点" class="headerlink" title="面试考点"></a>面试考点</h2><ol><li><p>消息队列的概念、模型、应用场景</p></li><li><p>交换机的类别、路由绑定的关系</p></li><li><p>消息可靠性</p></li><li><ol><li>消息确认机制</li><li>消息持久化</li><li>消息过期机制</li><li>死信队列</li></ol></li><li><p>延迟队列（类似死信队列）</p></li><li><p>顺序消费、消费幂等性</p></li><li><p>可扩展性</p></li><li><ol><li>集群</li><li>故障的恢复机制</li><li>镜像</li></ol></li><li><p>运维监控警告</p></li></ol><h1 id="RabbitMQ-项目实战"><a href="#RabbitMQ-项目实战" class="headerlink" title="RabbitMQ 项目实战"></a>RabbitMQ 项目实战</h1><p>怎么在项目中使用 RabbitMQ ？</p><h2 id="选择客户端"><a href="#选择客户端" class="headerlink" title="选择客户端"></a>选择客户端</h2><ol><li>使用官方的客户端</li></ol><p>优点：兼容性好，换语言成本低，灵活</p><p>缺点：太灵活，要自己维护、管理，太麻烦</p><ol><li>使用封装好的客户端，比如 Spring Boot RabbitMQ Starter</li></ol><p>优点：简单易用，可直接配置使用</p><p>缺点：封装的太好，有门槛，需要学习。不够灵活，被框架限制</p><p>根据场景选择，没有绝对的优劣之分：类似于 jdbc 和 MyBatis萨拉 </p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p><strong>注意：Maven引用时 AMQP 的版本一定要和 Spring Boot 的版本一致</strong>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在-yml-中引入配置"><a href="#在-yml-中引入配置" class="headerlink" title="在 yml 中引入配置"></a>在 yml 中引入配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">rabbitmq:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure><h2 id="创建交换机和队列"><a href="#创建交换机和队列" class="headerlink" title="创建交换机和队列"></a>创建交换机和队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建交换机和队列--用于测试（启动程序前执行一次，用于创建队列、交换机）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqInitMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">            factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;code_exchange&quot;</span>;</span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建队列</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;code_queue&quot;</span>;</span><br><span class="line">            channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;my_routingKey&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生产者-4"><a href="#生产者-4" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMessageProducer</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String exchange, String routingKey, String message)</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchange, routingKey, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消费者-4"><a href="#消费者-4" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMessageConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定程序监听的消息队列和确认机制</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &#123;&quot;code_queue&quot;&#125;, ackMode = &quot;MANUAL&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(String message, Channel channel, <span class="meta">@Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="type">long</span> deliveryTag)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;receiveMessage message = &#123;&#125;&quot;</span>, message);</span><br><span class="line">        channel.basicAck(deliveryTag, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMessageProducerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MyMessageProducer myMessageProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        myMessageProducer.sendMessage(<span class="string">&quot;code_exchange&quot;</span>, <span class="string">&quot;my_routingKey&quot;</span>, <span class="string">&quot;你好！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–&gt;</p>]]></content>
      
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2024/04/23/MySQL/"/>
      <url>/2024/04/23/MySQL/</url>
      
        <content type="html"><![CDATA[<!--# 【SQL语句的分类】## DQL(数据查询语言)- ### desc（查询表的结构，操作对象：表的结构）- ### select（查询表的数据，操作对象：表的数据）## DML(数据操作语言)### 操作对象： 表的数据- ### insert   增- ### delete   删- ### updata   改## DDL(数据定义语言)### 操作对象： 表的结构- ### create  增- ### drop   删- ### alter  改## TCL(事务控制语言)- ### 事务提交：commit- ### 事务回滚：rollback## DCL(数据控制语言)- ### 授权：qrant- ### 撤销权限：revoke# 【单行处理函数】**CONCAT()**：用于连接两个或多个字符串。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(first_name, <span class="string">&#x27; &#x27;</span>, last_name) <span class="keyword">AS</span> full_name <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><strong>UPPER()</strong> 和 **LOWER()**：将字符串转换为大写或小写。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(first_name) <span class="keyword">AS</span> upper_name <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>**LENGTH()**：返回字符串的长度。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LENGTH(description) <span class="keyword">AS</span> description_length <span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure><p>**SUBSTRING()**：从字符串中截取子串。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(title, <span class="number">1</span>, <span class="number">10</span>) <span class="keyword">AS</span> short_title <span class="keyword">FROM</span> books;</span><br></pre></td></tr></table></figure><p>**TRIM()**：去除字符串两端的空格或指定字符。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27; &#x27;</span> <span class="keyword">FROM</span> address) <span class="keyword">AS</span> trimmed_address <span class="keyword">FROM</span> customers;</span><br></pre></td></tr></table></figure><p>**DATE_FORMAT()**：将日期格式化为指定的字符串形式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(order_date, <span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">AS</span> formatted_date <span class="keyword">FROM</span> orders;</span><br></pre></td></tr></table></figure><p><strong>ROUND()</strong> 和 **CEIL()**：进行数值的四舍五入或向上取整。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ROUND(price, <span class="number">2</span>) <span class="keyword">AS</span> rounded_price <span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure><p><strong>IFNULL()</strong> 或 **COALESCE()**：返回第一个非NULL表达式的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IFNULL(discounted_price, price) <span class="keyword">AS</span> final_price <span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure><p><strong>NOW()</strong> 和 **CURDATE()**：返回当前日期时间或日期。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW() <span class="keyword">AS</span> current_datetime, CURDATE() <span class="keyword">AS</span> <span class="built_in">current_date</span>;</span><br></pre></td></tr></table></figure><h1 id="【多行处理函数】（分组函数）"><a href="#【多行处理函数】（分组函数）" class="headerlink" title="【多行处理函数】（分组函数）"></a>【多行处理函数】（分组函数）</h1><p>**COUNT()**：计算满足条件的行数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> total_customers <span class="keyword">FROM</span> customers;</span><br></pre></td></tr></table></figure><p><em><strong>注意：count(具体字段) 表示该字段下不为空的行数</strong></em></p><p>**SUM()**：计算某列的数值总和。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(quantity) <span class="keyword">AS</span> total_quantity <span class="keyword">FROM</span> order_items;</span><br></pre></td></tr></table></figure><p>**AVG()**：计算某列的数值平均值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(price) <span class="keyword">AS</span> average_price <span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure><p><strong>MAX()</strong> 和 **MIN()**：找出某列的最大值和最小值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">AS</span> highest_salary <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>**GROUP_CONCAT()**：将一列的值合并为一个逗号分隔的字符串。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department, GROUP_CONCAT(first_name) <span class="keyword">AS</span> employees_list <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> department;</span><br></pre></td></tr></table></figure><p><strong>HAVING</strong> 子句：在GROUP BY后对结果集中的分组进行过滤。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department, <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> avg_salary <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> department <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">&gt;</span> <span class="number">50000</span>;</span><br></pre></td></tr></table></figure><p><strong>DISTINCT</strong>：从结果集中筛选出不重复的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><strong>CASE</strong> 表达式：根据条件返回不同的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, </span><br><span class="line">       <span class="keyword">CASE</span> <span class="keyword">WHEN</span> salary <span class="operator">&gt;</span> <span class="number">50000</span> <span class="keyword">THEN</span> <span class="string">&#x27;High&#x27;</span></span><br><span class="line">            <span class="keyword">WHEN</span> salary <span class="operator">&gt;</span> <span class="number">30000</span> <span class="keyword">THEN</span> <span class="string">&#x27;Medium&#x27;</span></span><br><span class="line">            <span class="keyword">ELSE</span> <span class="string">&#x27;Low&#x27;</span></span><br><span class="line">       <span class="keyword">END</span> <span class="keyword">AS</span> salary_category</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h1 id="【数据类型】"><a href="#【数据类型】" class="headerlink" title="【数据类型】"></a>【数据类型】</h1><table><thead><tr><th>数据类型</th><th>大小</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>tinyint</td><td>1</td><td>短整数</td><td>-128, 127</td></tr><tr><td>int</td><td>4</td><td>整数</td><td>-2147483648, -2147483647</td></tr><tr><td>bigint</td><td>8</td><td>长整数</td><td>-2^63, 2^63-1</td></tr><tr><td>float</td><td>4</td><td>单精度浮点数</td><td>3.14, -0.002</td></tr><tr><td>double</td><td>8</td><td>双精度浮点数</td><td>2.718, -123.456</td></tr><tr><td>char(n)</td><td>0-255 bytee</td><td>固定长度字符串，长度为n</td><td>‘ABC’, ‘OpenAI’</td></tr><tr><td>varchar(n)</td><td>0-65535 bytee</td><td>可变长度字符串，最大长度为n</td><td>‘Hello’, ‘John Doe’</td></tr><tr><td>text</td><td>0-65535 bytee</td><td>长文本字符串</td><td>‘Lorem ipsum…’</td></tr><tr><td>date</td><td>3</td><td>日期</td><td>‘2023-08-17’</td></tr><tr><td>time</td><td>3</td><td>时间</td><td>‘14:30:00’</td></tr></tbody></table><h1 id="【约束字段】"><a href="#【约束字段】" class="headerlink" title="【约束字段】"></a>【约束字段】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建一个表结构</span><br><span class="line">create table <span class="title function_">tb_user</span><span class="params">(</span></span><br><span class="line"><span class="params">id <span class="type">int</span> primary key comment <span class="string">&#x27;ID，唯一标识&#x27;</span>,</span></span><br><span class="line"><span class="params">name varchar(<span class="number">20</span>)</span> not <span class="literal">null</span> comment <span class="string">&#x27;x&#x27;</span>n<span class="string">&#x27;</span></span><br><span class="line"><span class="string">) comment &#x27;</span>用户表<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">约束</th><th align="center">描述</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">非空约束</td><td align="center">不能为null</td><td align="center">not null</td></tr><tr><td align="center">唯一约束</td><td align="center">字段的所有数据都是唯一的、不重复</td><td align="center">unique</td></tr><tr><td align="center">主键约束</td><td align="center">一行数据的唯一标识，非空且唯一</td><td align="center">primary key</td></tr><tr><td align="center">默认约束</td><td align="center">未指定该字段，则采用的默认值</td><td align="center">default</td></tr><tr><td align="center">外键约束</td><td align="center">让两张表的数据建立连接，保证数据的一致性和完整性</td><td align="center">foreign key</td></tr></tbody></table><h1 id="【条件查询】-【单表查询】"><a href="#【条件查询】-【单表查询】" class="headerlink" title="【条件查询】-【单表查询】"></a>【条件查询】-【单表查询】</h1><p><em><strong>from：</strong></em>将要查询的表</p><p><em><strong>where：</strong></em>限制条件</p><p><em><strong>between…and…：</strong></em>在两者之间，左小右大</p><p><em><strong>注意</strong></em>：数据库中的null不能用 &#x3D; 号，应该用 is </p><p><em><strong>or：</strong></em>或者</p><p><em><strong>in：</strong></em>不是一个区间，后面跟具体的值。例：sal in (200, 800)</p><p><em><strong>not：</strong></em>表示取非</p><p><em><strong>like：</strong></em>模糊查询    like ‘ % 符号 % ‘ 。  查询含有该符号的字段 </p><p><em><strong>distinct：</strong></em>去除重复的字段</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="comment">---升序---</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">sal (<span class="keyword">asc</span>);<span class="operator">/</span><span class="operator">/</span>默认升序</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="comment">---降序---</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">sal <span class="keyword">desc</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="comment">---多字段排序---</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">sal <span class="keyword">asc</span>, ename <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><h3 id="关键字执行顺序"><a href="#关键字执行顺序" class="headerlink" title="关键字执行顺序"></a>关键字执行顺序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">...</span><br><span class="line">limit</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>综合例子：</strong><em><strong>找出每个岗位的平均薪资，要求显示平均薪资大于1500的，除了MANAGER岗位之外，要求按照平均薪资降序排</strong></em></p><p><em><strong>select</strong></em></p><p>​<em><strong>job, avg(sal) as avgsal</strong></em></p><p><em><strong>form</strong></em></p><p>​<em><strong>emp</strong></em></p><p><em><strong>where</strong></em></p><p>​<em><strong>job &lt;&gt; ‘MANAGER’</strong></em></p><p><em><strong>group by</strong></em></p><p>​<em><strong>job</strong></em></p><p><em><strong>having</strong></em></p><p>​<em><strong>avg(sal)  &gt; 1500</strong></em></p><p><em><strong>order by</strong></em></p><p>​<em><strong>avgsal desc;</strong></em></p><h1 id="【连接查询】-【多表查询】"><a href="#【连接查询】-【多表查询】" class="headerlink" title="【连接查询】-【多表查询】"></a>【连接查询】-【多表查询】</h1><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">e.ename, d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span><span class="operator">/</span><span class="operator">/</span>内连接</span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span><span class="operator">/</span><span class="operator">/</span>条件</span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure><h4 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">e.ename, e.sal, s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span><span class="operator">/</span><span class="operator">/</span>内连接</span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span><span class="operator">/</span><span class="operator">/</span>条件</span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">a.ename <span class="keyword">as</span> <span class="string">&#x27;员工表&#x27;</span>, b.ename <span class="keyword">as</span> <span class="string">&#x27;领导名&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span><span class="operator">/</span><span class="operator">/</span>内连接</span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">on</span><span class="operator">/</span><span class="operator">/</span>条件</span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><h4 id="左外连接（左连接）"><a href="#左外连接（左连接）" class="headerlink" title="左外连接（左连接）"></a>左外连接（左连接）</h4><p><em><strong>left：</strong></em>表示<strong>join</strong>关键字<strong>左边</strong>的表为主表，主表的数据全部查询出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename, d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">dept d </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> <span class="operator">/</span><span class="operator">/</span><span class="keyword">outer</span>可以省略</span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure><h4 id="右外连接（右连接）"><a href="#右外连接（右连接）" class="headerlink" title="右外连接（右连接）"></a>右外连接（右连接）</h4><p><em><strong>right：</strong></em>表示<strong>join</strong>关键字<strong>右边</strong>的表为主表，主表的数据全部查询出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename, d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e </span><br><span class="line"><span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> <span class="operator">/</span><span class="operator">/</span><span class="keyword">outer</span>可以省略</span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure><p>–&gt;</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2024/04/23/Git/"/>
      <url>/2024/04/23/Git/</url>
      
        <content type="html"><![CDATA[<!--# Git分布式版本控制工具## 1. 概述### 1.1 版本控制器的方式- 集中式版本控制工具：SVN、CVS- 分布式版本控制工具：Git### 1.2 Git工作流程1. clone（克隆）2. checkout（检出）3. add（添加）4. commit（提交）5. fetch（抓取）6. pull（拉取）7. push（推送）### 1.3 设置用户信息和查看配置信息<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置用户信息</span></span><br><span class="line">git config --global user.name&quot;用户名&quot;</span><br><span class="line">git config --global user.email&quot;邮箱&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看配置信息</span></span><br><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><h2 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h2><h3 id="2-1-获取本地仓库"><a href="#2-1-获取本地仓库" class="headerlink" title="2.1 获取本地仓库"></a>2.1 获取本地仓库</h3><p><em>要使用Git对我们的到吗进行版本控制，首先需要获得本地仓库</em></p><ul><li>在电脑的任意位置创建一个空目录作为我们的本地Git仓库</li><li>进入这个目录中，右键打开Git bash窗口</li><li>执行命令git init</li><li>创建成功可在文件夹下看到隐藏的.git目录</li></ul><h3 id="2-2-基础操作指令"><a href="#2-2-基础操作指令" class="headerlink" title="2.2 基础操作指令"></a>2.2 基础操作指令</h3><p><em>Git工作目录下对文件的<strong>修改</strong>（增、删、改）会存在几个状态，这些<strong>修改</strong>的状态会随着我们执行Git的命令而发生变化</em></p><ul><li>git add(工作区   –&gt;   暂存区)</li><li>git commit             (暂存区   –&gt;   本地仓库)</li></ul><h4 id="2-2-1-查看修改的状态（status）"><a href="#2-2-1-查看修改的状态（status）" class="headerlink" title="2.2.1 查看修改的状态（status）"></a>2.2.1 查看修改的状态（status）</h4><ul><li>作用：查看修改的状态（暂存区、工作区）</li><li>命令形式：<strong>git status</strong></li></ul><h4 id="2-2-2-添加工作区到暂存区（add）"><a href="#2-2-2-添加工作区到暂存区（add）" class="headerlink" title="2.2.2 添加工作区到暂存区（add）"></a><strong>2.2.2 添加工作区到暂存区（add）</strong></h4><ul><li>作用：添加工作区的一个或多个<strong>修改</strong>到暂存区</li><li>命令形式：<strong>git add 单个文件名|通配符</strong><ul><li>将所有修改加入暂存区：<strong>git add .</strong></li></ul></li></ul><h4 id="2-2-3-提交暂存区到本地仓库（commit）"><a href="#2-2-3-提交暂存区到本地仓库（commit）" class="headerlink" title="2.2.3 提交暂存区到本地仓库（commit）"></a>2.2.3 提交暂存区到本地仓库（commit）</h4><ul><li>作用：提交暂存区内容到本地仓库的当前分支</li><li>命令形式：<strong>git commit -m “注释内容”</strong></li></ul><h4 id="2-2-4-查看提交日志（log）"><a href="#2-2-4-查看提交日志（log）" class="headerlink" title="2.2.4 查看提交日志（log）"></a>2.2.4 查看提交日志（log）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用于输出git提交日志</span></span><br><span class="line">alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">git-log 包含下面的参数</span></span><br></pre></td></tr></table></figure><ul><li>作用：查看提交记录</li><li>命令形式：git log [option]<ul><li><strong>options</strong><ul><li>–all 显示所有分支</li><li>–pretty&#x3D;oneline 将提交信息显示为一行</li><li>–abbrev-commit  使得输出的commitld更简短</li><li>–graph  以图的形式显示</li></ul></li></ul></li></ul><h4 id="2-2-5-版本回退"><a href="#2-2-5-版本回退" class="headerlink" title="2.2.5 版本回退"></a>2.2.5 版本回退</h4><ul><li><p>作用：版本切换</p></li><li><p>命令形式：git reset –hard commitID</p><ul><li>commitID 可以使用 git-log 或 git log 指令查看</li></ul></li><li><p>查看已经删除的记录</p><ul><li>git reflog</li></ul></li></ul><h4 id="2-2-6-添加文件至忽略列表"><a href="#2-2-6-添加文件至忽略列表" class="headerlink" title="2.2.6 添加文件至忽略列表"></a>2.2.6 添加文件至忽略列表</h4><p>创建一个名为 .gitignore 的文件，列出需要忽略的文件模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># no .a files</span><br><span class="line">*.a</span><br></pre></td></tr></table></figure><h3 id="2-3-分支"><a href="#2-3-分支" class="headerlink" title="2.3 分支"></a>2.3 分支</h3><p>分支可以把你的工作从开发主线上分离出来进行重大bug的修改、开发新的功能，以免影响开发主线</p><h4 id="2-3-1-查看本地分支"><a href="#2-3-1-查看本地分支" class="headerlink" title="2.3.1 查看本地分支"></a>2.3.1 查看本地分支</h4><ul><li>git branch</li></ul><h4 id="2-3-2-创建本地分支"><a href="#2-3-2-创建本地分支" class="headerlink" title="2.3.2 创建本地分支"></a>2.3.2 创建本地分支</h4><ul><li>git branch 分支名<ul><li>重命名：-m <old_name> <new_name></li><li>删除：-d <b_name></li></ul></li></ul><h4 id="2-3-3-切换分支（checkout）"><a href="#2-3-3-切换分支（checkout）" class="headerlink" title="2.3.3 切换分支（checkout）"></a>2.3.3 切换分支（checkout）</h4><ul><li>git checkout</li></ul><p>可以切换不存在的分支（创建并切换）</p><ul><li>git checkout -b 分支名</li></ul><h4 id="2-3-4-合并分支（merge）"><a href="#2-3-4-合并分支（merge）" class="headerlink" title="2.3.4 合并分支（merge）"></a>2.3.4 合并分支（merge）</h4><ul><li>git merge 分支名称（将该分支合并到当前分支）</li></ul><p>–&gt;</p>]]></content>
      
      
      
        <tags>
            
            <tag> 版本控制工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
